{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import'../Layout/Layout.css';import{useNavigate,Link}from'react-router-dom';import axios from'axios';import useStore from'../store/store';// zustand store 사용\n/* 레이아웃 깨짐; 시간 없으니 이대로 일단 ㄱㄱ 건드리지마셈 */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Result(){const{generatedimageurl,setGeneratedImageUrl,prompt,setPrompt}=useStore();// 상태관리 store.js 사용\n// post의 content state 지정\nconst[temporaryprompt,setTemporaryPrompt]=useState(prompt);const[title,setTitle]=useState('');const[content,setContent]=useState('');const navigate=useNavigate();// use\n// login page focus를 위해 useRef 사용\nconst titleInputRef=useRef();const contentInputRef=useRef();// enter키 입력 시 focus가 title에서 content input으로 이동하도록 설정\nconst changeInputFocus=e=>{if(e.key===\"Enter\"){e.preventDefault();// enter를 입력하여 focus 이동 시 리랜더링으로 인한 title값 초기화 방지\ncontentInputRef.current.focus();}};// input 입력 시 텍스트가 뜨도록 기본 설정\nconst handleTitleChange=e=>{setTitle(e.target.value);};const handleContentChange=e=>{setContent(e.target.value);};const handlePromptChange=e=>{setTemporaryPrompt(e.target.value);};// Post 생성 request를 서버로 보내는 함수\nasync function handlePostCreateSubmit(e){e.preventDefault();// submit으로 인한 page reload를 방지하기 위해 preventDefault 사용\ntry{// .env를 바탕으로 backend 상대경로를 지정\nconst response=await axios.post(\"\".concat(process.env.REACT_APP_BACKEND_URL,\":\").concat(process.env.REACT_APP_BACKEND_PORT,\"/posts/create/\"),{image_url:generatedimageurl,title:title,content:content},{headers:{Authorization:\"Bearer \"+localStorage.getItem(\"ACCESS_TOKEN\")}}// 토큰 전달\n);if(response){alert(\"\\uD3EC\\uC2A4\\uD2B8 \\uC0DD\\uC131 \\uC131\\uACF5!\");setGeneratedImageUrl('');navigate(\"../\");// Main page로 이동\n}}catch(error){console.error(\"Authentication failed\",error);// response를 못받을 경우 콘솔에 에러 띄우기\n}}// page 첫 render 시 title input에 focus되도록 설정. re-render가 될 시 실행되는 경우 방지를 위해 빈 배열을 넣음\nuseEffect(()=>{titleInputRef.current.focus();},[]);// DALL-E에 사용할 prompt를 서버에 전달하는 함수\nasync function createPostImage(){try{console.log(\"입력하신 prompt는\",temporaryprompt,\"입니다.\");const response=await axios.post(\"\".concat(process.env.REACT_APP_BACKEND_URL,\":\").concat(process.env.REACT_APP_BACKEND_PORT,\"/posts/dalle/\"),{\"prompt\":temporaryprompt},{headers:{Authorization:\"Bearer \"+localStorage.getItem(\"ACCESS_TOKEN\")}// 토큰 전달\n});if(response){console.log(\"이미지 생성 중...\");console.log(\"response.data:\",response.data);setPrompt(temporaryprompt);setGeneratedImageUrl(response.data.image);}}catch(error){console.log(\"생성 실패\");console.error(\"Authentication failed\",error);}}// 생성된 image를 바로 다운로드하는 함수. js-file-download의 fileDownload 사용 -> 안됨\n// const handleDownload = (url, filename) => {\n//   axios.get(url, {\n//     responseType: 'blob',\n//   })\n//   .then((res) => {\n//     fileDownload(res.data, filename)\n//   })\n// }\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"Result\",children:[/*#__PURE__*/_jsx(\"img\",{class:\"Result-img\",src:generatedimageurl,alt:\"Sorry... I can't get the image...\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",class:\"Result-prompt\",value:temporaryprompt,onChange:handlePromptChange}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",class:\"Result-title\",placeholder:\"Enter post title\",value:title,onChange:handleTitleChange,ref:titleInputRef,onKeyDown:changeInputFocus}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",class:\"Result-content\",placeholder:\"Enter post content\",value:content,onChange:handleContentChange,ref:contentInputRef}),/*#__PURE__*/_jsx(\"div\",{class:\"Result-button\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"Result-btn-group\",children:[/*#__PURE__*/_jsx(\"button\",{children:\"SAVE\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePostCreateSubmit,children:\"POST\"}),/*#__PURE__*/_jsx(\"button\",{onClick:createPostImage,children:\"REGENERATE\"})]})})]})]});}export default Result;","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","Link","axios","useStore","jsx","_jsx","jsxs","_jsxs","Result","generatedimageurl","setGeneratedImageUrl","prompt","setPrompt","temporaryprompt","setTemporaryPrompt","title","setTitle","content","setContent","navigate","titleInputRef","contentInputRef","changeInputFocus","e","key","preventDefault","current","focus","handleTitleChange","target","value","handleContentChange","handlePromptChange","handlePostCreateSubmit","response","post","concat","process","env","REACT_APP_BACKEND_URL","REACT_APP_BACKEND_PORT","image_url","headers","Authorization","localStorage","getItem","alert","error","console","createPostImage","log","data","image","className","children","class","src","alt","type","onChange","placeholder","ref","onKeyDown","onClick"],"sources":["/Users/joshuagwak/Documents/workspace/joshua_finalCSS/src/Pages/Result.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '../Layout/Layout.css';\nimport { useNavigate, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport useStore from '../store/store';  // zustand store 사용\n\n/* 레이아웃 깨짐; 시간 없으니 이대로 일단 ㄱㄱ 건드리지마셈 */\n\nfunction Result() {\n    const { generatedimageurl, setGeneratedImageUrl, prompt, setPrompt } = useStore();  // 상태관리 store.js 사용\n\n    // post의 content state 지정\n    const [temporaryprompt, setTemporaryPrompt] = useState(prompt)\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n  \n    const navigate = useNavigate(); // use\n  \n  \n    // login page focus를 위해 useRef 사용\n    const titleInputRef = useRef();\n    const contentInputRef = useRef();\n  \n    // enter키 입력 시 focus가 title에서 content input으로 이동하도록 설정\n    const changeInputFocus = (e) => {\n      if (e.key === \"Enter\") {\n        e.preventDefault(); // enter를 입력하여 focus 이동 시 리랜더링으로 인한 title값 초기화 방지\n        contentInputRef.current.focus();\n      }\n    }\n  \n    // input 입력 시 텍스트가 뜨도록 기본 설정\n    const handleTitleChange = (e) => {\n      setTitle(e.target.value);\n    };\n  \n    const handleContentChange = (e) => {\n      setContent(e.target.value);\n    };\n  \n    const handlePromptChange = (e) => {\n      setTemporaryPrompt(e.target.value);\n    };\n  \n    // Post 생성 request를 서버로 보내는 함수\n    async function handlePostCreateSubmit(e) {\n      e.preventDefault(); // submit으로 인한 page reload를 방지하기 위해 preventDefault 사용\n      try {\n        // .env를 바탕으로 backend 상대경로를 지정\n        const response = await axios.post(\n          `${process.env.REACT_APP_BACKEND_URL}:${process.env.REACT_APP_BACKEND_PORT}/posts/create/`,\n          {\n            image_url: generatedimageurl,\n            title: title,\n            content: content,\n          },{\n            headers: { Authorization: \"Bearer \" + localStorage.getItem(\"ACCESS_TOKEN\") },} // 토큰 전달\n        );\n        if (response) {\n          alert(`포스트 생성 성공!`)\n          setGeneratedImageUrl('');\n          navigate(\"../\");  // Main page로 이동\n        }\n      } catch (error) {\n        console.error(\"Authentication failed\", error);  // response를 못받을 경우 콘솔에 에러 띄우기\n      }\n    }\n  \n  \n    // page 첫 render 시 title input에 focus되도록 설정. re-render가 될 시 실행되는 경우 방지를 위해 빈 배열을 넣음\n    useEffect(() => {\n      titleInputRef.current.focus();\n    }, [])\n  \n    // DALL-E에 사용할 prompt를 서버에 전달하는 함수\n    async function createPostImage() {\n      try {\n        console.log(\"입력하신 prompt는\", temporaryprompt, \"입니다.\")\n        const response = await axios.post(\n          `${process.env.REACT_APP_BACKEND_URL}:${process.env.REACT_APP_BACKEND_PORT}/posts/dalle/`,\n          {\n            \"prompt\": temporaryprompt\n          },\n          {\n            headers: { Authorization: \"Bearer \" + localStorage.getItem(\"ACCESS_TOKEN\") }, // 토큰 전달\n          }\n        );\n        if (response) {\n          console.log(\"이미지 생성 중...\")\n          console.log(\"response.data:\", response.data)\n          setPrompt(temporaryprompt)\n          setGeneratedImageUrl(response.data.image)\n        }\n      } catch (error) {\n        console.log(\"생성 실패\")\n        console.error(\"Authentication failed\", error);\n      }\n    }\n  \n    // 생성된 image를 바로 다운로드하는 함수. js-file-download의 fileDownload 사용 -> 안됨\n    // const handleDownload = (url, filename) => {\n    //   axios.get(url, {\n    //     responseType: 'blob',\n    //   })\n    //   .then((res) => {\n    //     fileDownload(res.data, filename)\n    //   })\n    // }\n    \n  return (\n  <div className=\"Result\">\n    <img \n    class=\"Result-img\"\n    src={generatedimageurl}\n    alt=\"Sorry... I can't get the image...\"\n     />\n  \n    <div>\n      <input type=\"text\" class=\"Result-prompt\" value={temporaryprompt} onChange={handlePromptChange} />\n      <input type=\"text\" class=\"Result-title\" placeholder=\"Enter post title\"value={title} onChange={handleTitleChange} ref={titleInputRef} onKeyDown={changeInputFocus} />\n        <input type=\"text\" class=\"Result-content\" placeholder=\"Enter post content\" value={content} onChange={handleContentChange} ref={contentInputRef}/>\n        <div class=\"Result-button\">\n          <div class=\"Result-btn-group\">\n          <button >SAVE</button>\n          <button onClick={handlePostCreateSubmit}>POST</button>\n          <button onClick={createPostImage}>REGENERATE</button>\n          </div>\n        </div>\n    </div>\n  </div>\n\n    \n  );\n}\n\nexport default Result;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}